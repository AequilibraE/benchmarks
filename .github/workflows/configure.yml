name: Configure machines for ASV

on:
  workflow_dispatch:

jobs:
  configure:
    runs-on: [self-hosted, "${{ matrix.os }}"]
    strategy:
      matrix:
        include:
          - os: Linux
            MACHINE: BOSGAME-SUE4P-wsl

          - os: Windows
            MACHINE: BOSGAME-SUE4P-windows

    steps:
      - name: Retrieve and set system information on Linux
        if: matrix.os == 'Linux'
        run: |
          OS_NAME=$(uname -sr)
          CPU_INFO=$(lscpu | grep "Model name" | awk '{for (i=3; i<=NF; ++i) printf $i " "; print ""}' | sed 's/ *$//g')
          NUM_CPUS=$(nproc)
          RAM_INFO=$(free -h --si | awk '/Mem:/ {print $2}')
          ARCH_INFO=$(uname -m)
          echo "os_name=$OS_NAME" >> $GITHUB_ENV
          echo "cpu_info=$CPU_INFO" >> $GITHUB_ENV
          echo "num_cpus=$NUM_CPUS" >> $GITHUB_ENV
          echo "ram_info=$RAM_INFO" >> $GITHUB_ENV
          echo "arch_info=$ARCH_INFO" >> $GITHUB_ENV

      - name: Retrieve and set system information on Windows
        if: matrix.os == 'Windows'
        run: |
          $os_name = (Get-CimInstance Win32_OperatingSystem).Caption
          $cpu_info = (Get-CimInstance Win32_Processor).Name
          $num_cpus = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
          $ram_info = "{0}GB" -f [math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum).Sum / 1GB, 2)
          $arch_info = (Get-CimInstance Win32_Processor).Architecture
          switch ($arch_info) {
            0 { $arch_info = "x86" }
            1 { $arch_fino = "MIPS" }
            2 { $arch_fino = "Alpha" }
            3 { $arch_fino = "PowerPC" }
            5 { $arch_fino = "ARM" }
            6 { $arch_fino = "ia64" }
            9 { $arch_info = "x86_64" }
            12 { $arch_info = "ARM64" }
            default { $arch_info = "Unknown" }
          }
          echo "os_name=$os_name".Trim() | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "cpu_info=$cpu_info".Trim() | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "num_cpus=$num_cpus".Trim() | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "ram_info=$ram_info".Trim() | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "arch_info=$arch_info".Trim() | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.12"
          enable-cache: true
          prune-cache: false

      - name: Install  ASV
        run: uv pip install asv

      - name: Write ASV configuration (Linux)
        if: matrix.os == 'Linux'
        run: |
          mkdir -p results/${{ matrix.MACHINE }}
          cat <<EOF > results/${{ matrix.MACHINE }}/machine.json
          {
              "arch": "${{ env.arch_info }}",
              "cpu": "${{ env.cpu_info }}",
              "machine": "${{ matrix.MACHINE }}",
              "num_cpu": "${{ env.num_cpus }}",
              "os": "${{ env.os_name }}",
              "ram": "${{ env.ram_info }}",
              "version": 1
          }
          EOF
          cat results/${{ matrix.MACHINE }}/machine.json

      - name: Write ASV configuration (Windows)
        if: matrix.os == 'Windows'
        run: |
          $machine_dir = "results/${{ matrix.MACHINE }}"
          New-Item -ItemType Directory -Force -Path $machine_dir | Out-Null
          $content = @"
          {
              "arch": "${{ env.arch_info }}",
              "cpu": "${{ env.cpu_info }}",
              "machine": "${{ matrix.MACHINE }}",
              "num_cpu": "${{ env.num_cpus }}",
              "os": "${{ env.os_name }}",
              "ram": "${{ env.ram_info }}",
              "version": 1
          }
          "@
          [System.IO.File]::WriteAllLines("$machine_dir/machine.json", $content)
          Get-Content "$machine_dir/machine.json"
