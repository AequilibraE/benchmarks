{"project": "aequilibrae", "project_url": "https://aequilibrae.com", "show_commit_url": "https://github.com/AequilibraE/aequilibrae/commit/", "hash_length": 8, "revision_to_hash": {"177": "d074778d0e216f97e2864e74ba9ecd77d81ec09e", "361": "8d988e54968e9be98823a2d2a29bc931a59569a8", "646": "ba0b7ca68a3dc152ea9df3b2e6dc07194c639854", "648": "4124b10c694b8ad08b251c6cd534e9601de8f572", "718": "02f3919b408c793623b05d440d248d8040dd91db", "720": "5dd32b0fbfce22305ff735048325305c9a74396f", "723": "a813b3550f470c0b726910319b42e727b51d8192", "727": "a061156e79c0f91eae700397a77cc4a3901c6f54", "866": "2333123a5f881970e07af32d9a8fab7785a54d09", "868": "206760c123b13afe9642a023adba319954f9bb07", "932": "629841d967d316f8925206d3ade8f10b0d454377", "992": "d8a9b557ebc4f04df1efcc3422164e6c5ab92583", "1040": "237687420838d07aba409d5528fb446f6ab898cb", "1194": "2cc9292a426e51c63c0c1277fd5b8aae53c209cd", "1559": "afa08c0f6135077ee78f3c414c04555dcdca247e", "1645": "78a24fc0f1baf37f277bc54c3e4ed14fc295d648", "1940": "a779a9df92d5b10581f698b1142825739be2266c", "2029": "c3dfaf0b9f375027018c7a0e099f93734684a259", "2133": "58fbf2fd7acecb5c898bacb2748771032894313d", "2245": "146d8731ffc4d4d4c7513f4f4f00f45c891f097d", "2256": "9671d29b5dbf0bb7ec7804147d5806dcf526a949", "2285": "85087e9a4a1f74c48c94567a98924cb34a4bcf39", "2406": "d799f9af9c73e2c99991f53aa1b98f50988d7599", "2629": "e46b74b48d4e05fcfbd8dba8e4e9ea57b8cb35d5", "2640": "15628e7381fb98006bf1655fe93a723f929e7b6b", "2662": "3db2427137e2547b075584e4f8d83ae2ebfd7ec3", "2772": "0459c54b57fccddec3b71a80d726c1be2f939489", "2793": "30c5a289fb4c2cecb54d7f0bd9ff2f983b7f120e", "2815": "4a8b23e6398983c7e6a32c3fdfe8dfed3ecd7b25", "2941": "e5a21f1fea76ae8e6c0ea74f40ef7c8d06108e25", "3058": "a169b6112cb1a0db40db2c44aa70251b4ef98896", "3124": "df559bf4b703c823e3b8bd8ee76d2b5c91689100", "3299": "e6e73346d40239e4ac1fd8d475f45be619f7bb94", "3815": "77edeae154a42dedb764ae4b2e1f32accdd3676c", "4279": "458bb40466629058f0ccfa6ddad7c822a7fd28cc", "4341": "47b019cdacb1e630352f65cc4fb52e3e9ddcbd40", "4343": "4aed1aa8319382c3a14585124572d1023cf2e3d6", "4550": "523611d7e0d39cb185d6a75dc3ab6d40d2c03de0", "4560": "799e1d87c727e1a359df2c9a81803bb355776bcc", "4677": "f5479b9383ac236339d00e34fdef903361279a5f", "4729": "b8ce05dd8bfbde95be59d22f149a6bd985f5fd6e", "4853": "4cb2884fba340488b2b8755c0aa5ba9ccc5fda34", "4855": "de3eec2c456536ff56b489b64fa154ca55015346", "4860": "073b45d1fce209e742e95ca30a0d221606b7d299", "4862": "2a6c05e87d83884a824d6344c94d513919d929a1", "4865": "25ce27f4d2943044d8ba153d6654131bf4adfe6c", "4877": "7d1583674e9a7f3f6592352d2b2e09515e07021b", "4895": "3a376b6dd87f2f700b0fbe2090dfdf240226a29a", "4899": "4291fe5375ab9e8e3ed7b9791cae762fc52327eb", "4902": "4e8f321964a2e0e3dbef44e02811748ca7abfa7d", "4909": "3bfb99f2994b12d4fd27f5ee8c3fbfe94fc4059c", "4937": "dc3a59929640bc9ddaed8d8c9566ce7849a961fb", "4940": "6c35ea4b7f93388554a1e9bfe64ca3491ef5af59", "4949": "073e2c3b3e9130f9856ee55b4b6fa485e135ec5c", "4954": "4b8963702bcd7f1184074a32fa59facdd63b0092", "4964": "4bae104f161584b294e77455c7c8d35f81ca2f03", "4966": "7192db619969e09f479981ae0ea73e8166fa0e3a", "4978": "e54f0bc9e3b638e3ea4ae84401a0b25c083c5737", "4980": "ee11931c5c152b7adc7fcbd683364b5324843d43", "4986": "7293d610953406c7b8bbb527d94d485f72b21936", "4988": "dbaa7f4498f895d07f90448c9f8fef4d6a540650", "4993": "376d981170dd42230c9c523be32ecec3b6fb555f", "4996": "9fa8df736364437d155754ccef2efd888bccc6ed", "5010": "a1b790a6d04bb70854da1087bf56ecc01ed80565", "5013": "88433a9743b9c2981a1d5b639a7fb7180286c008", "5041": "e4a21ee8c03a04478c24cd6057e128394f465002", "5046": "fca9f5c78a445c3dda5ca43af0d7eb7b10b49d70", "5058": "8ec6f303f62bf13c09f573a3c208a975eea28c86", "5059": "5158c1ca8548e8033512f38922994d1b5c80615a", "5063": "f4f2886124e93384631a72d30d6468cd61fc4b4f", "5065": "88695dc4bc13c4c1fb618ed95aa0dfa16ac7c3c3", "5067": "0885ef6be802f1d7450b71e0e3f6a059f03d4bbd", "5070": "94c836452aef7d788f5fd4cb49bb9c6403e786b7", "5076": "a17cadd3bd869e98d2db89532773b07495aae4c3", "5093": "aba8b514913766d5dbff2630cc6bc5eeea0afe41", "5135": "e43e7e0233949652d5acbb3f4bec050495481461"}, "revision_to_date": {"177": 1546152485000, "361": 1575287117000, "646": 1580468269000, "648": 1580468966000, "718": 1581043069000, "720": 1581044468000, "723": 1581044846000, "727": 1581046398000, "866": 1581997217000, "868": 1581998328000, "932": 1583069838000, "992": 1584418500000, "1040": 1587422104000, "1194": 1594093749000, "1559": 1610615570000, "1645": 1613395548000, "1940": 1634626190000, "2029": 1648621633000, "2133": 1658641897000, "2245": 1667465944000, "2256": 1668412572000, "2285": 1669707165000, "2406": 1673874665000, "2629": 1679984735000, "2640": 1680578604000, "2662": 1680676973000, "2772": 1682640057000, "2793": 1683681211000, "2815": 1684485748000, "2941": 1688964209000, "3058": 1696835937000, "3124": 1700872160000, "3299": 1702726312000, "3815": 1708820645000, "4279": 1722036217000, "4341": 1724013318000, "4343": 1724047556000, "4550": 1730459434000, "4560": 1731034152000, "4677": 1736957264000, "4729": 1739171112000, "4853": 1740983024000, "4855": 1741037607000, "4860": 1741832986000, "4862": 1741913501000, "4865": 1742389751000, "4877": 1742816589000, "4895": 1743726535000, "4899": 1743753787000, "4902": 1744019642000, "4909": 1745353931000, "4937": 1745836420000, "4940": 1745840128000, "4949": 1745907954000, "4954": 1746016041000, "4964": 1746050262000, "4966": 1746059329000, "4978": 1746576880000, "4980": 1746671497000, "4986": 1746766651000, "4988": 1746788472000, "4993": 1747172102000, "4996": 1747394134000, "5010": 1747738987000, "5013": 1747790608000, "5041": 1747976890000, "5046": 1747980836000, "5058": 1747996377000, "5059": 1747996713000, "5063": 1747998185000, "5065": 1747999500000, "5067": 1748000721000, "5070": 1748003622000, "5076": 1748005995000, "5093": 1748148942000, "5135": 1750070649000}, "params": {"arch": ["x86_64"], "cpu": ["AMD Ryzen 9 6900HX with Radeon Graphics"], "machine": ["BOSGAME-SUE4P-windows", "BOSGAME-SUE4P-wsl"], "os": ["Linux", "Microsoft Windows 11 Pro"], "ram": ["31G", "64GB"], "python": ["3.12"], "num_cpu": ["16", null], "branch": ["develop"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD Ryzen 9 6900HX with Radeon Graphics", "machine": "BOSGAME-SUE4P-windows", "os": "Microsoft Windows 11 Pro", "ram": "64GB", "python": "3.12", "branch": "develop", "num_cpu": null}, {"arch": "x86_64", "cpu": "AMD Ryzen 9 6900HX with Radeon Graphics", "machine": "BOSGAME-SUE4P-wsl", "num_cpu": "16", "os": "Linux", "ram": "31G", "python": "3.12", "branch": "develop"}], "benchmarks": {"coquimbo.GraphBuilding.time_build_graphs": {"code": "class GraphBuilding:\n    def time_build_graphs(self):\n        self.project.network.build_graphs()\n\n    def setup(self):\n        self.dir = TemporaryDirectory()\n        self.project = create_example(\n            os.path.join(self.dir.name, \"project\"), \"coquimbo\"\n        )\n    \n        self.project.network.build_graphs()\n        self.graph = self.project.network.graphs[\"c\"]\n        self.graph.set_graph(\"distance\")\n        self.graph.set_blocked_centroid_flows(False)", "min_run_count": 2, "name": "coquimbo.GraphBuilding.time_build_graphs", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "556486137abacdca160872fdfd38504d60f2ba411d71918f95f6d063921a312b", "warmup_time": -1}, "coquimbo.GraphBuilding.time_prepare_graph": {"code": "class GraphBuilding:\n    def time_prepare_graph(self):\n        graph = self.project.network.graphs[\"c\"]\n        graph.set_graph(\"distance\")\n        graph.set_blocked_centroid_flows(False)\n        graph.prepare_graph()\n\n    def setup(self):\n        self.dir = TemporaryDirectory()\n        self.project = create_example(\n            os.path.join(self.dir.name, \"project\"), \"coquimbo\"\n        )\n    \n        self.project.network.build_graphs()\n        self.graph = self.project.network.graphs[\"c\"]\n        self.graph.set_graph(\"distance\")\n        self.graph.set_blocked_centroid_flows(False)", "min_run_count": 2, "name": "coquimbo.GraphBuilding.time_prepare_graph", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "0d96eb70ad765a9045e7730bc6739b8631733751e7fa3ebcab3a87d3eb06bd78", "warmup_time": -1}, "coquimbo.PathComputation.time_compute_path": {"code": "class PathComputation:\n    def time_compute_path(self, early_exit, heuristic):\n        if early_exit and heuristic is not None:\n            raise SkipNotImplemented(\"A* not applicable when using early exit\")\n    \n        self.res.compute_path(32343, 22041, early_exit=early_exit, a_star=heuristic is not None, heuristic=heuristic)\n\n    def setup(self, *_):\n        self.dir = TemporaryDirectory()\n        self.project = create_example(\n            os.path.join(self.dir.name, \"project\"), \"coquimbo\"\n        )\n    \n        self.project.network.build_graphs()\n        self.graph = self.project.network.graphs[\"c\"]\n        self.graph.set_graph(\"distance\")\n        self.graph.set_blocked_centroid_flows(False)\n    \n        self.res = PathResults()\n        self.res.prepare(self.graph)", "min_run_count": 2, "name": "coquimbo.PathComputation.time_compute_path", "number": 0, "param_names": ["early_exit", "A* heuristic"], "params": [["True", "False"], ["None", "'equirectangular'", "'haversine'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b51eb078435dce232f8e1338e80a09d059f5904eda5efe2f3a99780f5fb91cd5", "warmup_time": -1}, "coquimbo.RouteChoice.time_rc": {"code": "class RouteChoice:\n    def time_rc(self, algorithm, assignment, results):\n        self.rc.set_choice_set_generation(algorithm, max_routes=5, seed=12345)\n        self.rc.prepare()\n        self.rc.execute(perform_assignment=assignment)\n        if results:\n            self.rc.get_results()\n\n    def setup(self, *_):\n        self.dir = TemporaryDirectory()\n        self.project = create_example(\n            os.path.join(self.dir.name, \"project\"), \"coquimbo\"\n        )\n    \n        self.project.network.build_graphs()\n        self.graph = self.project.network.graphs[\"c\"]\n        self.graph.set_graph(\"distance\")\n        self.graph.set_blocked_centroid_flows(False)\n    \n    \n        self.mat = AequilibraeMatrix()\n        self.mat.create_empty(zones=self.graph.num_zones, matrix_names=[\"demand\"], memory_only=True)\n        self.mat.index = self.graph.centroids[:]\n        self.mat.matrices[:, :, 0] = np.full((self.graph.num_zones, self.graph.num_zones), 10.0)\n        self.mat.computational_view()\n    \n        self.rc = RouteChoiceClass(self.graph)\n        self.rc.add_demand(self.mat)", "min_run_count": 2, "name": "coquimbo.RouteChoice.time_rc", "number": 0, "param_names": ["algorithm", "assignment", "results"], "params": [["'bfsle'", "'lp'"], ["True", "False"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "f1a2d720390a620b6066ae50e887115585e44c411df3c5bf110c6dc2c272df0f", "warmup_time": -1}, "coquimbo.Skimming.time_network_skimming": {"code": "class Skimming:\n    def time_network_skimming(self):\n        skm = NetworkSkimming(self.graph)\n        skm.execute()\n\n    def setup(self):\n        self.dir = TemporaryDirectory()\n        self.project = create_example(\n            os.path.join(self.dir.name, \"project\"), \"coquimbo\"\n        )\n    \n        self.project.network.build_graphs()\n        self.graph = self.project.network.graphs[\"c\"]\n        self.graph.set_graph(\"distance\")\n        self.graph.set_skimming([\"distance\"])\n        self.graph.set_blocked_centroid_flows(False)\n    \n        self.graph.prepare_graph()", "min_run_count": 2, "name": "coquimbo.Skimming.time_network_skimming", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "d45285e5030601a7f2673fe7384900b3c91bafa22a4e99446d4882517549fa2a", "warmup_time": -1}, "sioux_falls.GraphBuilding.time_build_graphs": {"code": "class GraphBuilding:\n    def time_build_graphs(self):\n        self.project.network.build_graphs()\n\n    def setup(self):\n        self.dir = TemporaryDirectory()\n        self.project = create_example(\n            os.path.join(self.dir.name, \"project\"), \"sioux_falls\"\n        )\n    \n        self.project.network.build_graphs()\n        self.graph = self.project.network.graphs[\"c\"]\n        self.graph.set_graph(\"distance\")\n        self.graph.set_blocked_centroid_flows(False)", "min_run_count": 2, "name": "sioux_falls.GraphBuilding.time_build_graphs", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e79cedac5895c324436091cb036c216acd918ab24b332ada844918eb31270bce", "warmup_time": -1}, "sioux_falls.GraphBuilding.time_prepare_graph": {"code": "class GraphBuilding:\n    def time_prepare_graph(self):\n        graph = self.project.network.graphs[\"c\"]\n        graph.set_graph(\"distance\")\n        graph.set_blocked_centroid_flows(False)\n        graph.prepare_graph()\n\n    def setup(self):\n        self.dir = TemporaryDirectory()\n        self.project = create_example(\n            os.path.join(self.dir.name, \"project\"), \"sioux_falls\"\n        )\n    \n        self.project.network.build_graphs()\n        self.graph = self.project.network.graphs[\"c\"]\n        self.graph.set_graph(\"distance\")\n        self.graph.set_blocked_centroid_flows(False)", "min_run_count": 2, "name": "sioux_falls.GraphBuilding.time_prepare_graph", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "0b5eff0b3bf496754f3b1eeb5619f790854ff8696aa5cc44f10a1956e5673b04", "warmup_time": -1}, "sioux_falls.PathComputation.time_compute_path": {"code": "class PathComputation:\n    def time_compute_path(self, early_exit, heuristic):\n        if early_exit and heuristic is not None:\n            raise SkipNotImplemented(\"A* not applicable when using early exit\")\n    \n        self.res.compute_path(1, 22, early_exit=early_exit, a_star=heuristic is not None, heuristic=heuristic)\n\n    def setup(self, *_):\n        self.dir = TemporaryDirectory()\n        self.project = create_example(\n            os.path.join(self.dir.name, \"project\"), \"sioux_falls\"\n        )\n    \n        self.project.network.build_graphs()\n        self.graph = self.project.network.graphs[\"c\"]\n        self.graph.set_graph(\"distance\")\n        self.graph.set_blocked_centroid_flows(False)\n    \n        self.res = PathResults()\n        self.res.prepare(self.graph)", "min_run_count": 2, "name": "sioux_falls.PathComputation.time_compute_path", "number": 0, "param_names": ["early_exit", "A* heuristic"], "params": [["True", "False"], ["None", "'equirectangular'", "'haversine'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "5ef57f1717c7b7996429f8e463ed532a477ae5c82197a72eaac5ff843e0630fb", "warmup_time": -1}, "sioux_falls.RouteChoice.time_rc": {"code": "class RouteChoice:\n    def time_rc(self, algorithm, assignment, results):\n        self.rc.set_choice_set_generation(algorithm, max_routes=5, seed=12345)\n        self.rc.prepare()\n        self.rc.execute(perform_assignment=assignment)\n        if results:\n            self.rc.get_results()\n\n    def setup(self, *_):\n        self.dir = TemporaryDirectory()\n        self.project = create_example(\n            os.path.join(self.dir.name, \"project\"), \"sioux_falls\"\n        )\n    \n        self.project.network.build_graphs()\n        self.graph = self.project.network.graphs[\"c\"]\n        self.graph.set_graph(\"distance\")\n        self.graph.set_blocked_centroid_flows(False)\n    \n        self.mat = AequilibraeMatrix()\n        self.mat.create_empty(\n            zones=self.graph.num_zones, matrix_names=[\"demand\"], memory_only=True\n        )\n        self.mat.index = self.graph.centroids[:]\n        self.mat.matrices[:, :, 0] = np.full(\n            (self.graph.num_zones, self.graph.num_zones), 10.0\n        )\n        self.mat.computational_view()\n    \n        self.rc = RouteChoiceClass(self.graph)\n        try:\n            self.rc.add_demand(self.mat)\n        except AttributeError:\n            self.rc.set_demand(self.mat)", "min_run_count": 2, "name": "sioux_falls.RouteChoice.time_rc", "number": 0, "param_names": ["algorithm", "assignment", "results"], "params": [["'bfsle'", "'lp'"], ["True", "False"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "0e099a218cca0fb6edcf1a0fd9a6a008dc8e14178a62ed5652a551653c2d3f04", "warmup_time": -1}, "sioux_falls.Skimming.time_network_skimming": {"code": "class Skimming:\n    def time_network_skimming(self):\n        skm = NetworkSkimming(self.graph)\n        skm.execute()\n\n    def setup(self):\n        self.dir = TemporaryDirectory()\n        self.project = create_example(\n            os.path.join(self.dir.name, \"project\"), \"sioux_falls\"\n        )\n    \n        self.project.network.build_graphs()\n        self.graph = self.project.network.graphs[\"c\"]\n        self.graph.set_graph(\"distance\")\n        self.graph.set_skimming([\"distance\"])\n        self.graph.set_blocked_centroid_flows(False)\n    \n        self.graph.prepare_graph()", "min_run_count": 2, "name": "sioux_falls.Skimming.time_network_skimming", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "74e033ebf99a123493e885ede074569d9603809a46e9138b91899f57bcc16a1a", "warmup_time": -1}}, "machines": {"BOSGAME-SUE4P-windows": {"arch": "x86_64", "cpu": "AMD Ryzen 9 6900HX with Radeon Graphics", "machine": "BOSGAME-SUE4P-windows", "os": "Microsoft Windows 11 Pro", "ram": "64GB", "version": 1}, "BOSGAME-SUE4P-wsl": {"arch": "x86_64", "cpu": "AMD Ryzen 9 6900HX with Radeon Graphics", "machine": "BOSGAME-SUE4P-wsl", "num_cpu": "16", "os": "Linux", "ram": "31G", "version": 1}}, "tags": {"0.7.1": 1645, "V.0.7.4": 2133, "V.0.7.5": 2245, "V0.5.2": 361, "V0.5.3": 646, "V0.5.3.1.post1": 648, "V0.6.0": 718, "V0.6.0.post1": 723, "V0.6.0.post2": 727, "V0.6.1": 866, "V0.6.1post": 868, "V0.6.2": 932, "V0.6.3": 992, "V0.6.4": 1040, "V0.6.5": 1194, "V0.7.2": 1940, "V0.7.3": 2029, "V0.7.6": 2256, "V0.7.7": 2285, "V0.8.0": 2406, "V0.8.3": 2662, "V0.9.2": 2815, "VV0.6.0.post1": 720, "v0.5": 177, "v0.7.0": 1559, "v0.8.1": 2629, "v0.8.2": 2640, "v0.9.0": 2772, "v0.9.1": 2793, "v0.9.3": 2941, "v0.9.4": 3058, "v0.9.5": 3124, "v1.0.0": 3299, "v1.0.1": 3815, "v1.1.0": 4279, "v1.1.1": 4341, "v1.1.1a": 4343, "v1.1.2": 4550, "v1.1.3": 4560, "v1.1.4": 4677, "v1.1.5": 4729, "v1.2.0": 4853, "v1.3.0": 4964, "v1.3.1": 4988, "v1.4.0": 5067, "v1.4.1": 5076, "v1.4.2": 5093, "v1.4.3": 5135}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}